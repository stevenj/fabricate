#!/usr/bin/env python2

# Stand-alone intel hex to C code array generator.
# Parameters:
#   hex2c <intel hex file> <cname> <arrayname> <options : -AVR, -16, -8>
#   -AVR makes the file use PROGMEM to mark the array as stored in code space.
#   -16 use word array not byte array.
#   -8  use byte array not word array. (Default)

import os,sys,subprocess
from datetime import date

isAVR = False
isWORD = False

def hex2c(filename, cname, arrayname):
    global isAVR, isWORD

    cdata={}
    min_address = 0xffff
    max_address = 0x0000
    for line in tuple(open(filename, 'r')):
        line = line.strip()
        linebytes = [line[i:i+2] for i in xrange(1, len(line)-1, 2)]
        if (len(linebytes) >= 5) and (line[0] == ':') and linebytes[3] == '00':
            count = int(linebytes[0],16)
            address = int(line[3:7],16)
            if address < min_address:
                min_address = address
            chk = 0
            for byte in linebytes:
                chk += int(byte,16)
            if chk & 0xFF != 0:
                print "WARNING: Line %s - FAILED CHECKSUM" % line
            for byte in linebytes[4:count+4]:
                cdata[address] = byte
                address += 1
            if address > max_address:
                max_address = address

    cfile = open(cname, 'w')

    arraymark = "PROGMEM " if isAVR else ""

    cfile.write("/*!\n")
    cfile.write(" * \\file   %s\n" % os.path.basename(cname))
    cfile.write(" *\n")
    cfile.write(" * \\author Auto Generated by %s\n" % os.path.basename(__file__))
    cfile.write(" * \\date   %s\n" % date.today().ctime())
    cfile.write(" *\n")
    cfile.write(" * Generated from %s\n" % os.path.basename(filename))
    cfile.write(" */\n")
    cfile.write("\n")
    cfile.write("#include <stdint.h>\n")
    if isAVR:
        cfile.write("#include <avr/pgmspace.h>\n")
    cfile.write("\n")
    cfile.write("const uint16_t %s_address %s= 0x%04X;\n" % (arrayname, arraymark, min_address))
    cfile.write("\n")
    if isWORD:
        cfile.write("const uint16_t %s_data[%d] %s= {" % (arrayname, (max_address-min_address)/2,  arraymark))
        for address in xrange(min_address, max_address, 2):
            if address in cdata:
                byte = cdata[address]
            else:
                byte = 'FF'
            if address+1 in cdata:
                byte += cdata[address+1]
            else:
                byte += 'FF'

            # New Line
            if ((address - min_address) % 14) == 0:
                cfile.write("\n  /* 0x%04X */ " % address)
            cfile.write("0x%s" % byte)
            if (address < max_address-2):
                cfile.write(", ")
    else:
        cfile.write("const uint8_t  %s_data[%d] %s= {" % (arrayname, max_address-min_address, arraymark))
        for address in xrange(min_address, max_address):
            if address in cdata:
                byte = cdata[address]
            else:
                byte = 'FF'

            # New Line
            if ((address - min_address) % 9) == 0:
                cfile.write("\n  /* 0x%04X */ " % address)
            cfile.write("0x%s" % byte)
            if (address < max_address-1):
                cfile.write(", ")

    cfile.write("\n};\n\n")

def usage(argv):
    global isAVR, isWORD
    need_usage = False
    if argv is None:
        argv = sys.argv
    if '-AVR' in argv:
        isAVR = True
        argv.remove('-AVR')
    if '-16' in argv:
        isWORD = True
        argv.remove('-16')
    if '-8' in argv:
        isWORD = False
        argv.remove('-8')

    if ("-h" in argv[1:]) or ("--help" in argv[1:]) or (len(argv) != 4) :
        need_usage = True
    else:
        try:
            filename     = argv[1]
            cname        = argv[2]
            array_name   = argv[3]
        except:
            need_usage = True

    if need_usage:
        print "USAGE: %s <intel hex file> <c file> <array name> <option : -AVR>" % argv[0]
        print "\t\tOPTIONS: "
        print "\t\t\t-AVR = makes the file use PROGMEM to mark the array as stored in code space."
        print "\t\t\t-16  = use word array not byte array."
        print "\t\t\t-8   = use byte array not word array. (Default)"
        sys.exit(2)

    return (filename, cname, array_name)

def main(argv=None):
    args = usage(argv)
    hex2c(args[0],args[1],args[2])

if __name__ == "__main__":
   sys.exit(main())
